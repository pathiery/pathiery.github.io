{"version":3,"sources":["./src/ui/FacetValueSuggestions/FacetValueSuggestions.ts","./sass/_FieldSuggestions.scss","./src/ui/FacetValueSuggestions/FacetValueSuggestionsProvider.ts"],"names":[],"mappings":"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","file":"FacetValueSuggestions__7508a1dba2c4098847f0.js","sourcesContent":["import 'styling/_FieldSuggestions';\nimport * as _ from 'underscore';\nimport { IPopulateOmniboxSuggestionsEventArgs, OmniboxEvents } from '../../events/OmniboxEvents';\nimport { exportGlobally } from '../../GlobalExports';\nimport { l } from '../../MiscModules';\nimport { QueryStateModel } from '../../ModelsModules';\nimport { $$ } from '../../utils/Dom';\nimport { DomUtils } from '../../UtilsModules';\nimport { analyticsActionCauseList, IAnalyticsNoMeta } from '../Analytics/AnalyticsActionListMeta';\nimport { Component } from '../Base/Component';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IFieldOption } from '../Base/IComponentOptions';\nimport { Initialization } from '../Base/Initialization';\nimport { IOmniboxSuggestion, Omnibox } from '../Omnibox/Omnibox';\nimport { FacetValueSuggestionsProvider, IFacetValueSuggestionRow, IFacetValueSuggestionsProvider } from './FacetValueSuggestionsProvider';\nimport { Suggestion } from '../../magicbox/SuggestionsManager';\n\nexport interface IFacetValueSuggestionsOptions {\n  numberOfSuggestions: number;\n  field?: IFieldOption;\n  isCategoryField?: boolean;\n  categoryFieldDelimitingCharacter?: string;\n  useQuerySuggestions?: boolean;\n  useValueFromSearchbox?: boolean;\n  displayEstimateNumberOfResults?: boolean;\n  expression?: string;\n  templateHelper?: (row: IFacetValueSuggestionRow, omnibox: Omnibox) => string;\n}\n\nexport interface IQuerySuggestionKeyword {\n  text: string;\n  html: string;\n}\n\n/**\n * This component provides [`Omnibox`]{@link Omnibox} query suggestions scoped to distinct categories based on the values of a\n * specific [`field`]{@link FacetValueSuggestions.options.field} whose [Facet](https://docs.coveo.com/en/1982/#facet) option is enabled.\n *\n * @externaldocs [Providing Facet Value Suggestions](https://docs.coveo.com/en/340/#providing-facet-value-suggestions)\n *\n * @availablesince [May 2018 Release (v2.4094.8)](https://docs.coveo.com/410/#may-2018-release-v240948)\n */\nexport class FacetValueSuggestions extends Component {\n  static ID = 'FacetValueSuggestions';\n\n  static doExport = () => {\n    exportGlobally({\n      FacetValueSuggestions: FacetValueSuggestions\n    });\n  };\n\n  /**\n   * @componentOptions\n   */\n  static options: IFacetValueSuggestionsOptions = {\n    /**\n     * The field on whose values the scoped query suggestions should be based.\n     *\n     * @examples @productcategory\n     */\n    field: ComponentOptions.buildFieldOption({ required: true }),\n\n    /**\n     * The maximum number of suggestions to render in the [`Omnibox`]{@link Omnibox}.\n     */\n    numberOfSuggestions: ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 }),\n\n    /**\n     * Whether to get scoped query suggestions from the current Coveo ML query suggestions.\n     *\n     * **Note:** If this options is set to `true` the [`enableQuerySuggestAddon`]{@link Omnibox.options.enableQuerySuggestAddon} option of the [`Omnibox`]{@link Omnibox.option.enableQuerySuggestAddon} component must be set to `true` as well.\n     */\n    useQuerySuggestions: ComponentOptions.buildBooleanOption({ defaultValue: true }),\n\n    /**\n     * Whether to get scoped query suggestions from the current user query entered in the search box.\n     *\n     * **Default:** `true` if [`useQuerySuggestions`]{@link FacetValueSuggestions.options.useQuerySuggestions} is `false`; `false` otherwise\n     */\n    useValueFromSearchbox: ComponentOptions.buildBooleanOption({\n      postProcessing: (value, options: IFacetValueSuggestionsOptions) => {\n        return value || !options.useQuerySuggestions;\n      }\n    }),\n\n    /**\n     * Whether to display an estimate of the number of results for each scoped query suggestions.\n     *\n     * **Notes:**\n     * - Setting this option to `true` has no effect when the [`templateHelper`]{@link FacetValueSuggestions.options.templateHelper} options is set.\n     * - When displaying scoped query suggestions for a standalone search box whose queries are redirected to a search interface enforcing other filters, the number of results will be inaccurate.\n     */\n    displayEstimateNumberOfResults: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * The template helper function to execute when rendering each scoped query suggestion.\n     *\n     * If specified, the function must have the following signature: (row: [IFacetValueSuggestionRow]{@link IFacetValueSuggestionRow}, omnibox: Omnibox) => string\n     *\n     * If not specified, a default function will be used.\n     *\n     * **Note:** You cannot set this option directly in the component markup as an HTML attribute. You must either set it:\n     * - In the [`init`]{@link init} call of your search interface (see [Passing Component Options in the init Call](https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call)\n     * - Before the `init` call, using the [`options`](@link options) top-level function (see [Passing Component Options Before the init Call](https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call)).\n     *\n     * **Example:**\n     *\n     * ```javascript\n     * Coveo.init(document.getElementById('search'), {\n     *   FacetValueSuggestions: {\n     *     templateHelper: (row, omnibox) => { return `Searching for <strong>${row.keyword}</strong> in category <em>${row.value}</em>`; }\n     *   }\n     * })\n     * ```\n     */\n    templateHelper: ComponentOptions.buildCustomOption<(row: IFacetValueSuggestionRow, omnibox: Omnibox) => string>(() => {\n      return null;\n    }),\n\n    /**\n     * Whether the [`field`]{@link FacetValueSuggestions.options.field} option references a multi-value field.\n     *\n     * Setting this option to `true` if appropriate will allow the corresponding [`CategoryFacet`]{@link CategoryFacet} or [`DynamicHierarchicalFacet`]{@link DynamicHierarchicalFacet} component (if present) to properly handle the filter format.\n     *\n     * See also the [`categoryFieldDelimitingCharacter`]{@link FacetValueSuggestions.options.categoryFieldDelimitingCharacter} option.\n     */\n    isCategoryField: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * The delimiting character used for the multi-value field referenced by the [`field`]{@link FacetValueSuggestions.options.field} option.\n     *\n     * @examples ;, #\n     */\n    categoryFieldDelimitingCharacter: ComponentOptions.buildStringOption({ defaultValue: '|', depend: 'isCategoryField' }),\n\n    /**\n     * An advanced query expression to add when requesting facet value suggestions.\n     *\n     * Set this option to ensure that the suggestions are properly scoped when using the component with a standalone search box. For instance, if a certain [tab]{@link Tab} is automatically selected in the search interface the standalone search box is redirecting its queries to, you should set this option to that tab's [`expression`]{@link Tab.options.expression}.\n     *\n     * @examples @objecttype==Message\n     */\n    expression: ComponentOptions.buildQueryExpressionOption()\n  };\n\n  public facetValueSuggestionsProvider: IFacetValueSuggestionsProvider;\n\n  private queryStateFieldFacetId;\n\n  static defaultTemplate(this: FacetValueSuggestions, row: IFacetValueSuggestionRow, omnibox: Omnibox): string {\n    const keyword = row.keyword.html;\n    const facetValue = DomUtils.highlight(row.value, 'coveo-omnibox-hightlight');\n    const details = this.options.displayEstimateNumberOfResults\n      ? DomUtils.highlight(\n          ` (${l('ResultCount', row.numberOfResults.toString(), row.numberOfResults)})`,\n          'coveo-omnibox-suggestion-results-count',\n          true\n        )\n      : '';\n    return `${l('KeywordInCategory', keyword, facetValue)}${details}`;\n  }\n\n  private static getQuerySuggestionKeywordFromText(text: string): IQuerySuggestionKeyword {\n    return {\n      text,\n      html: DomUtils.highlight(text, 'coveo-omnibox-hightlight')\n    };\n  }\n\n  /**\n   * Creates a new `FacetValueSuggestions` component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the `FacetValueSuggestions` component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   */\n  constructor(element: HTMLElement, public options: IFacetValueSuggestionsOptions, bindings?: IComponentBindings) {\n    super(element, FacetValueSuggestions.ID, bindings);\n\n    this.options = ComponentOptions.initComponentOptions(element, FacetValueSuggestions, options);\n\n    this.facetValueSuggestionsProvider = new FacetValueSuggestionsProvider(this.queryController, {\n      field: <string>this.options.field,\n      expression: this.options.expression\n    });\n    this.queryStateFieldFacetId = `f:${this.options.field}`;\n\n    if (!this.options.templateHelper) {\n      this.options.templateHelper = FacetValueSuggestions.defaultTemplate;\n    }\n\n    $$(this.root).on(OmniboxEvents.populateOmniboxSuggestions, (e: Event, args: IPopulateOmniboxSuggestionsEventArgs) => {\n      args.suggestions.push(this.getSuggestions(args.omnibox));\n    });\n  }\n\n  public async getSuggestions(omnibox: Omnibox): Promise<IOmniboxSuggestion[]> {\n    if (this.options.numberOfSuggestions == 0) {\n      return [];\n    }\n\n    const text = omnibox.getText();\n\n    const suggestions: IOmniboxSuggestion[] = await this.getFacetValueSuggestions(text, omnibox);\n\n    return suggestions || [];\n  }\n\n  private async getQuerySuggestionsKeywords(omnibox: Omnibox): Promise<IQuerySuggestionKeyword[]> {\n    if (this.options.useQuerySuggestions && omnibox.suggestionAddon) {\n      const suggestions = await omnibox.suggestionAddon.getSuggestion();\n      return suggestions.map(({ text, html }) => <IQuerySuggestionKeyword>{ text: text || '', html });\n    } else {\n      return [];\n    }\n  }\n\n  private async getFacetValueSuggestions(text: string, omnibox: Omnibox): Promise<IOmniboxSuggestion[]> {\n    const wordsToQuery = this.options.useValueFromSearchbox ? [FacetValueSuggestions.getQuerySuggestionKeywordFromText(text)] : [];\n\n    const suggestionsKeywords: IQuerySuggestionKeyword[] = await this.getQuerySuggestionsKeywords(omnibox);\n    const allKeywordsToQuery = _.unique(\n      wordsToQuery.concat(suggestionsKeywords).filter(keyword => keyword.text != ''),\n      keyword => keyword.text\n    );\n\n    if (allKeywordsToQuery.length === 0) {\n      return [];\n    }\n\n    return this.getSuggestionsForWords(allKeywordsToQuery, omnibox);\n  }\n\n  private async getSuggestionsForWords(keywordToQuery: IQuerySuggestionKeyword[], omnibox: Omnibox): Promise<IOmniboxSuggestion[]> {\n    try {\n      const suggestions = await this.facetValueSuggestionsProvider.getSuggestions(keywordToQuery);\n\n      this.logger.debug('FacetValue Suggestions Results', suggestions);\n\n      const currentSelectedValues: string[] = this.queryStateModel.get(this.queryStateFieldFacetId) || [];\n      const filteredSuggestions = suggestions.filter(suggestion =>\n        this.isSuggestionRowAlreadyCheckedInFacet(suggestion, currentSelectedValues)\n      );\n      return this.rankSuggestionRows(filteredSuggestions).map(result => this.mapFacetValueSuggestion(result, omnibox));\n    } catch (error) {\n      this.logger.error(error);\n      return [];\n    }\n  }\n\n  private isSuggestionRowAlreadyCheckedInFacet(suggestion: IFacetValueSuggestionRow, currentlySelectedValues: string[]): boolean {\n    return !currentlySelectedValues.some(value => value == suggestion.value);\n  }\n\n  private rankSuggestionRows(suggestions: IFacetValueSuggestionRow[]): IFacetValueSuggestionRow[] {\n    const rankedResults = [...suggestions.sort((a, b) => b.score.distanceFromTotalForField - a.score.distanceFromTotalForField)];\n    const firstSlice = Math.ceil(this.options.numberOfSuggestions / 2);\n    const lastSlice = -Math.floor(this.options.numberOfSuggestions / 2);\n\n    const firstResultsToReturn = rankedResults.splice(0, firstSlice);\n\n    if (lastSlice != 0) {\n      const lastResultsToReturn = rankedResults.slice(lastSlice);\n      return [...firstResultsToReturn, ...lastResultsToReturn];\n    }\n\n    return firstResultsToReturn;\n  }\n\n  private mapFacetValueSuggestion(resultToShow: IFacetValueSuggestionRow, omnibox: Omnibox) {\n    const suggestion: IOmniboxSuggestion = {\n      html: this.buildDisplayNameForRow(resultToShow, omnibox),\n      text: resultToShow.keyword.text\n    };\n\n    const fieldValues = this.options.isCategoryField\n      ? resultToShow.value.split(this.options.categoryFieldDelimitingCharacter)\n      : [resultToShow.value];\n\n    suggestion.advancedQuery = fieldValues.map(value => `${this.options.field}==\"${value}\"`).join(' AND ');\n\n    suggestion.onSelect = () => this.onSuggestionSelected(suggestion, fieldValues, omnibox);\n\n    return suggestion;\n  }\n\n  private buildDisplayNameForRow(row: IFacetValueSuggestionRow, omnibox: Omnibox): string {\n    try {\n      return this.options.templateHelper.call(this, row, omnibox);\n    } catch (ex) {\n      this.logger.error('Could not apply template from options for the given row. Will use default template.', ex, row, omnibox);\n      return FacetValueSuggestions.defaultTemplate.call(this, row, omnibox);\n    }\n  }\n\n  private onSuggestionSelected(suggestion: Suggestion, fieldValues: string[], omnibox: Omnibox): void {\n    omnibox.setText(suggestion.text);\n    // Copy the state here, else it will directly modify queryStateModel.defaultAttributes.fv.\n    const fvState: { [key: string]: string[] } = { ...this.queryStateModel.get(QueryStateModel.attributesEnum.fv) };\n    const existingValues: string[] = fvState[this.options.field.toString()] || [];\n\n    fvState[this.options.field.toString()] = existingValues.concat(fieldValues);\n\n    this.queryStateModel.set(QueryStateModel.attributesEnum.fv, fvState);\n    omnibox.magicBox.blur();\n    this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.omniboxField, {});\n    this.queryController.executeQuery();\n  }\n}\n\nInitialization.registerAutoCreateComponent(FacetValueSuggestions);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FacetValueSuggestions/FacetValueSuggestions.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/_FieldSuggestions.scss\n// module id = 515\n// module chunks = 44 45 88","import { QueryController } from '../../Core';\nimport { IIndexFieldValue } from '../../rest/FieldValue';\nimport { IListFieldValuesRequest } from '../../rest/ListFieldValuesRequest';\nimport { IFieldOption } from '../Base/IComponentOptions';\nimport { IQuerySuggestionKeyword } from './FacetValueSuggestions';\n\n/**\n * Used to define a row returned by an [`IFacetValueSuggestionsProvider`]{@link IFacetValueSuggestionsProvider}.\n */\nexport interface IFacetValueSuggestionRow {\n  /**\n   * The score computed by the suggestions provider.\n   *\n   * A higher score means the results is more relevant.\n   */\n  score: IFacetValueSuggestionScore;\n\n  /**\n   * The field value returned by the suggestion that should be used to filter the results.\n   */\n  value: string;\n  /**\n   * The number of results matching the value for the given keyword.\n   */\n  numberOfResults: number;\n  /**\n   * The keyword that was used in the query to retrieve results.\n   */\n  keyword: IQuerySuggestionKeyword;\n  /**\n   * The field that was used for the suggestions.\n   */\n  field: IFieldOption;\n}\n\nexport interface IFacetValueSuggestionScore {\n  distanceFromTotalForField: number;\n}\n\ninterface IFacetValueSuggestionsResponse {\n  responses: IFacetValueBatchResponse[];\n  reference: IFacetValueReference;\n}\n\ninterface IFacetValueBatchResponse {\n  values: IIndexFieldValue[];\n  keyword: IQuerySuggestionKeyword;\n}\n\ntype IFacetValueReference = {\n  fieldsTotal: { [value: string]: number };\n  smallestTotal: number;\n};\n\n/**\n * Defines options for the [`FacetValueSuggestions`]{@link FacetValueSuggestions} component.\n */\nexport interface IFacetValueSuggestionsProviderOptions {\n  field: string;\n  expression?: string;\n}\n\n/**\n * Provides suggestions for the [`FacetValueSuggestions`]{@link FacetValueSuggestions} component.\n */\nexport interface IFacetValueSuggestionsProvider {\n  getSuggestions(valuesToSearch: IQuerySuggestionKeyword[]): Promise<IFacetValueSuggestionRow[]>;\n}\n\nexport class FacetValueSuggestionsProvider implements IFacetValueSuggestionsProvider {\n  constructor(private queryController: QueryController, private options: IFacetValueSuggestionsProviderOptions) {}\n\n  public async getSuggestions(valuesToSearch: IQuerySuggestionKeyword[]): Promise<IFacetValueSuggestionRow[]> {\n    const fieldsToQuery = await this.getFieldValuesToQuery(valuesToSearch);\n    return this.getAllSuggestionsRows(fieldsToQuery.responses, fieldsToQuery.reference);\n  }\n\n  private getAllSuggestionsRows(\n    fieldResponses: IFacetValueBatchResponse[],\n    fieldTotalReference: IFacetValueReference\n  ): IFacetValueSuggestionRow[] {\n    return fieldResponses.reduce((allValues, fieldResponse) => {\n      const suggestionRows = fieldResponse.values.map(indexFieldValue => {\n        return <IFacetValueSuggestionRow>{\n          numberOfResults: indexFieldValue.numberOfResults,\n          keyword: fieldResponse.keyword,\n          value: indexFieldValue.value,\n          score: this.computeScoreForSuggestionRow(indexFieldValue, fieldTotalReference),\n          field: this.options.field\n        };\n      });\n      return allValues.concat(suggestionRows);\n    }, []);\n  }\n\n  private async getFieldValuesToQuery(valuesToSearch: IQuerySuggestionKeyword[]): Promise<IFacetValueSuggestionsResponse> {\n    // The reference request will be used to get the maximum number of values for a given facet value.\n    const referenceValuesRequest = this.buildReferenceFieldValueRequest();\n    const queryParts = this.getQueryToExecuteParts();\n\n    if (this.options.expression) {\n      queryParts.push(this.options.expression);\n    }\n\n    const suggestionValuesRequests = valuesToSearch.map(keyword => {\n      const queryToExecute = [...queryParts, keyword.text].join(' ');\n      return this.buildListFieldValueRequest(queryToExecute);\n    });\n\n    const requests = [...suggestionValuesRequests, referenceValuesRequest];\n    const values = await this.queryController.getEndpoint().listFieldValuesBatch({\n      batch: requests\n    });\n\n    const reference = this.computeReferenceFromBatch(values.pop());\n    const responses: IFacetValueBatchResponse[] = values.map((value, i) => {\n      return <IFacetValueBatchResponse>{\n        keyword: valuesToSearch[i],\n        values: value\n      };\n    });\n\n    return <IFacetValueSuggestionsResponse>{\n      responses,\n      reference\n    };\n  }\n\n  private computeScoreForSuggestionRow(fieldValue: IIndexFieldValue, reference: IFacetValueReference): IFacetValueSuggestionScore {\n    const totalNumberForFieldValue = reference.fieldsTotal[fieldValue.value] || reference.smallestTotal;\n    const distanceFromTotalForField: number = (totalNumberForFieldValue - fieldValue.numberOfResults) / totalNumberForFieldValue * 100;\n    return {\n      distanceFromTotalForField\n    };\n  }\n\n  private computeReferenceFromBatch(batch: IIndexFieldValue[]): IFacetValueReference {\n    const fieldsTotal = {};\n    batch.forEach(value => (fieldsTotal[value.value] = value.numberOfResults));\n    return {\n      fieldsTotal: fieldsTotal,\n      smallestTotal: batch[batch.length - 1].numberOfResults\n    };\n  }\n\n  private buildListFieldValueRequest(queryToExecute: string): IListFieldValuesRequest {\n    return {\n      field: <string>this.options.field,\n      ignoreAccents: true,\n      maximumNumberOfValues: 3,\n      queryOverride: queryToExecute\n    };\n  }\n\n  private buildReferenceFieldValueRequest(): IListFieldValuesRequest {\n    return {\n      field: <string>this.options.field\n    };\n  }\n\n  private getQueryToExecuteParts(): string[] {\n    const lastQuery = this.queryController.getLastQuery();\n    const aqWithoutCurrentField =\n      lastQuery && lastQuery.aq ? this.removeFieldExpressionFromExpression(this.options.field.toString(), lastQuery.aq) : '';\n\n    return [aqWithoutCurrentField, lastQuery.cq].filter(part => !!part);\n  }\n\n  private removeFieldExpressionFromExpression(field: string, expression: string): string {\n    const expressionWithParenthesis = '([^)]*)';\n    const expressionAsSingleValue = '[^ ]*';\n    return expression\n      .replace(new RegExp(`${field}==${expressionWithParenthesis}`, 'gi'), '')\n      .replace(new RegExp(`${field}==${expressionAsSingleValue}`, 'gi'), '');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FacetValueSuggestions/FacetValueSuggestionsProvider.ts"],"sourceRoot":""}