{"version":3,"sources":["./src/ui/ExportToExcel/ExportToExcel.ts","./sass/_ExportToExcel.scss"],"names":[],"mappings":"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","file":"ExportToExcel__7508a1dba2c4098847f0.js","sourcesContent":["import { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IFieldOption } from '../Base/IComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { SettingsEvents } from '../../events/SettingsEvents';\nimport { ISettingsPopulateMenuArgs } from '../Settings/Settings';\nimport { IAnalyticsNoMeta, analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\nimport { Initialization } from '../Base/Initialization';\nimport { l } from '../../strings/Strings';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport 'styling/_ExportToExcel';\nimport { SVGIcons } from '../../utils/SVGIcons';\nimport { SearchInterface } from '../SearchInterface/SearchInterface';\nimport { get } from '../Base/RegisteredNamedMethods';\nimport * as moment from 'moment';\nimport { IQuery } from '../../rest/Query';\n\nlet createAnchor = () => document.createElement('a');\n\nexport function setCreateAnchor(fn: () => HTMLAnchorElement) {\n  createAnchor = fn;\n}\n\nexport interface IExportToExcelOptions {\n  numberOfResults?: number;\n  fieldsToInclude?: IFieldOption[];\n}\n\n/**\n * The ExportToExcel component renders an item in the {@link Settings} menu to allow the end user to export the current\n * search results to the Microsoft Excel format (.xlsx).\n *\n * @availablesince [November 2015 Release (v1.0.139)](https://docs.coveo.com/en/289/#november-2015-release-v10139)\n */\nexport class ExportToExcel extends Component {\n  static ID = 'ExportToExcel';\n\n  static doExport = () => {\n    exportGlobally({\n      ExportToExcel: ExportToExcel\n    });\n  };\n\n  /**\n   * The options for the ExportToExcel\n   * @componentOptions\n   */\n  static options: IExportToExcelOptions = {\n    /**\n     * Specifies the number of results to include in the resulting Excel file.\n     *\n     * Generating and downloading the Excel file should take a reasonably short amount of time when using the default\n     * value. However, this amount of time will increase exponentially as you set the value higher.\n     *\n     * Consequently, you should avoid setting this value above the default index limit of 1000 search results.\n     *\n     * Default value is `100`. Minimum value is `1`.\n     *\n     * @availablesince [February 2016 Release (v1.0.318)](https://docs.coveo.com/en/309/#february-2016-release-v10318)\n     */\n    numberOfResults: ComponentOptions.buildNumberOption({ defaultValue: 100, min: 1 }),\n    /**\n     * Specifies the fields to include in the CSV output.\n     *\n     * Note that this does not affect top level properties such as the title, clickUri, printableUri and sysUri, for example.\n     *\n     * Default value is `undefined`, meaning all fields will be exported.\n     */\n    fieldsToInclude: ComponentOptions.buildFieldsOption()\n  };\n\n  /**\n   * Creates a new ExportToExcel component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the ExportToExcel component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param _window The global Window object (used to download the Excel link).\n   */\n  constructor(\n    public element: HTMLElement,\n    public options: IExportToExcelOptions,\n    public bindings?: IComponentBindings,\n    public _window?: Window\n  ) {\n    super(element, ExportToExcel.ID, bindings);\n    this._window = this._window || window;\n    this.options = ComponentOptions.initComponentOptions(element, ExportToExcel, options);\n    this.bind.onRootElement(SettingsEvents.settingsPopulateMenu, (args: ISettingsPopulateMenuArgs) => {\n      args.menuData.push({\n        text: l('ExportToExcel'),\n        className: 'coveo-export-to-excel',\n        tooltip: l('ExportToExcelDescription'),\n        onOpen: () => this.download(),\n        svgIcon: SVGIcons.icons.dropdownExport,\n        svgIconClassName: 'coveo-export-to-excel-svg'\n      });\n    });\n  }\n\n  /**\n   * Downloads the Excel representation of the current query.\n   *\n   * Also logs an `exportToExcel` event in the usage analytics.\n   */\n  public download() {\n    const query = this.buildExcelQuery();\n    this.logger.debug(\"Performing query following 'Export to Excel' click\");\n\n    const endpoint = this.queryController.getEndpoint();\n    this.usageAnalytics.logCustomEvent<IAnalyticsNoMeta>(analyticsActionCauseList.exportToExcel, {}, this.element);\n\n    endpoint.fetchBinary(query).then(content => this.downloadExcelFile(content));\n  }\n\n  private buildExcelQuery(): IQuery {\n    let query = this.queryController.getLastQuery();\n    query = _.omit(query, ['numberOfResults', 'fieldsToInclude']);\n\n    if (this.options.fieldsToInclude) {\n      query.fieldsToInclude = <string[]>this.options.fieldsToInclude;\n    }\n\n    return {\n      ...query,\n      format: 'xlsx',\n      numberOfResults: this.options.numberOfResults\n    };\n  }\n\n  private downloadExcelFile(content: ArrayBuffer) {\n    const blob = new Blob([content], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    const url = URL.createObjectURL(blob);\n\n    const a = createAnchor();\n    a.href = url;\n    a.download = this.buildExcelFileName();\n    a.click();\n\n    URL.revokeObjectURL(url);\n  }\n\n  private buildExcelFileName() {\n    const utc = moment().utc();\n    const year = utc.format('YYYY');\n    const month = utc.format('MM');\n    const day = utc.format('DD');\n    const hour = utc.format('HH');\n    const minute = utc.format('mm');\n    const second = utc.format('ss');\n\n    return `query--${year}-${month}-${day}--${hour}-${minute}-${second}.xlsx`;\n  }\n\n  static create(element: HTMLElement, options?: IExportToExcelOptions, root?: HTMLElement): ExportToExcel {\n    return new ExportToExcel(element, options, (<SearchInterface>get(root, SearchInterface)).getBindings());\n  }\n}\n\nInitialization.registerAutoCreateComponent(ExportToExcel);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ExportToExcel/ExportToExcel.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/_ExportToExcel.scss\n// module id = 606\n// module chunks = 70 88"],"sourceRoot":""}